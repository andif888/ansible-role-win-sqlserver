---
# tasks file for ansible-role-win-sqlserver
- name: Ensure extract dir exists
  ansible.windows.win_file:
    path: '{{ sql_server_extract_dir }}'
    state: directory

- name: Download PSTools
  ansible.windows.win_get_url:
    url: '{{ ps_tools_download_url }}'
    dest: '{{ sql_server_extract_dir }}\{{ ps_tools_filename_zip }}'
    validate_certs: '{{ sql_server_iso_url_validate_certs }}'
    force: no

- name: PSTools - Unzip
  community.windows.win_unzip:
    src: '{{ sql_server_extract_dir }}\{{ ps_tools_filename_zip }}'
    dest: '{{ sql_server_extract_dir }}\'
    delete_archive: yes

- name: Download SQL Server ISO
  ansible.windows.win_get_url:
    url: '{{ sql_server_iso_url }}'
    dest: '{{ sql_server_iso_file_path }}'
    validate_certs: '{{ sql_server_iso_url_validate_certs }}'
    force: no

- name: Sleep for 5 seconds and continue with play
  ansible.windows.win_wait_for:
    timeout: 5

- name: Mount SQL Server ISO
  community.windows.win_disk_image:
    image_path: '{{ sql_server_iso_file_path }}'
    state: present
  register: disk_image_out

- name: Sleep for 5 seconds and continue with play
  ansible.windows.win_wait_for:
    timeout: 5


- name: Copy ConfigurationFile.ini
  ansible.windows.win_template:
    src: '{{ sql_server_install_configuration_template }}'
    dest: '{{ sql_server_install_configuration_file_path }}'


- name: Execute SQL Setup with psexec
  ansible.windows.win_command: 'psexec.exe -accepteula -nobanner -i 1 -s {{ disk_image_out.mount_paths[0] }}\setup.exe /CONFIGURATIONFILE="{{ sql_server_install_configuration_file_path }}" /IACCEPTSQLSERVERLICENSETERMS /QUIET'
  args:
    chdir: '{{ sql_server_extract_dir }}'
    creates: '{{ sql_server_already_installed_path }}'
  register: sql_setup_result

- name: Debug sql_setup_result
  ansible.builtin.debug:
    var: sql_setup_result

- name: Umount SQL Server ISO
  community.windows.win_disk_image:
    image_path: '{{ sql_server_iso_file_path }}'
    state: absent


- name: Allow firewall port 1433
  community.windows.win_firewall_rule:
    name: '{{ sql_server_windows_firewall_rule_name }}'
    localport: '{{ sql_server_windows_firewall_port }}'
    action: allow
    direction: in
    protocol: tcp
    state: present
    enabled: yes
  tags: firewall

- name: Ensure extract dir exists
  ansible.windows.win_file:
    path: '{{ sql_server_extract_dir }}'
    state: absent

# sp_configure settings

- name: SP_configure settings
  block:
    - name: Copy sql script for sp_configure_settings
      ansible.windows.win_template:
        src: '{{ sql_server_sp_configure_settings_file_sql_template }}'
        dest: '{{ sql_server_sp_configure_settings_file_sql_script_file_path }}'
      tags: sql-server-sp-configure-settings

    - name: Execute sql script for sp_configure_settings
      ansible.windows.win_shell: |
        sqlcmd -b -i "{{ sql_server_sp_configure_settings_file_sql_script_file_path }}"
      register: result_execute_sql_sp_configure_settings
      tags: sql-server-sp-configure-settings

    - name: Debug result_execute_sql_sp_configure_settings
      ansible.builtin.debug:
        var: result_execute_sql_sp_configure_settings
      tags: sql-server-sp-configure-settings
  when: sql_server_sp_configure_settings_enabled

# temp db on ephemeral disk

- name: Ephemeral Disk for TempDB
  block:
    - name: Ephemeral Disk for TempDB - SQL startup script
      ansible.windows.win_template:
        src: '{{ role_path }}/templates/sqltempdb_init.ps1.j2'
        dest: '{{ ansible_env.SystemRoot }}\sqltempdb_init.ps1'

    - name: Ephemeral Disk for TempDB - Create Starup Task
      community.windows.win_scheduled_task:
        name: SQL Startup
        description: Create directory for Temp DB on startup
        triggers:
          - type: boot
        actions:
          - path: powershell.exe
            arguments: '-ExecutionPolicy Unrestricted -NonInteractive -File {{ ansible_env.SystemRoot }}\sqltempdb_init.ps1'
        username: SYSTEM
        state: present
        run_level: highest
        enabled: yes

    - name: Ephemeral Disk for TempDB - Set service startup mode to delayed
      ansible.windows.win_service:
        name: '{{ item }}'
        start_mode: delayed
      with_items:
        - MSSQLSERVER
        - SQLSERVERAGENT
  when:
    - sql_server_dir_temp_db is defined
    - sql_server_dir_temp_db_on_emphemeral_disk

# sysadmin role
- name: Sysadmin Roles
  block:
    - name: Copy sql script for sysadmin role members
      ansible.windows.win_template:
        src: '{{ sql_server_change_sysadmin_role_file_sql_template }}'
        dest: '{{ sql_server_change_sysadmin_role_file_sql_script_file_path }}'
      tags: sql-server-sysadmin-role

    - name: Execute sql script for sysadmin role members
      ansible.windows.win_shell: |
        sqlcmd -b -i "{{ sql_server_change_sysadmin_role_file_sql_script_file_path }}"
      register: result_execute_sql_sysadmin_role_script
      tags: sql-server-sysadmin-role

    - name: Debug result_execute_sql_sysadmin_role_script
      ansible.builtin.debug:
        var: result_execute_sql_sysadmin_role_script
      tags: sql-server-sysadmin-role

    - name: Ensure to remove script for sysadmin role members
      ansible.windows.win_file:
        path: "{{ sql_server_change_sysadmin_role_file_sql_script_file_path }}"
        state: absent
      tags: sql-server-sysadmin-role
  when: (sql_server_sysadmin_windows_accounts | length > 0) or (sql_server_sysadmin_sql_accounts | length > 0)
...
